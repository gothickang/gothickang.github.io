<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snail-k</title>
  
  <subtitle>Stay Hungary，Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-24T08:40:37.379Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript Map和Set</title>
    <link href="http://yoursite.com/2019/11/24/JavaScriptMap%E5%92%8CSet%20/"/>
    <id>http://yoursite.com/2019/11/24/JavaScriptMap和Set /</id>
    <published>2019-11-24T08:15:17.000Z</published>
    <updated>2019-11-24T08:40:37.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-Map和Set"><a href="#JavaScript-Map和Set" class="headerlink" title="JavaScript Map和Set"></a>JavaScript Map和Set</h2><p>JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。</p><p>但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p><p>为了解决这个问题，最新的ES6规范引入了新的数据类型Map。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map是一组键值对的结构，具有极快的查找速度。</p><p>举个例子，假设要根据同学的名字查找对应的成绩，如果用Array实现，需要两个Array：</p><blockquote><p>var names = [‘Michael’,’Bob’,’Tracy’];</p><p>var scores = [95,75,85];</p></blockquote><p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，Array越长，耗时越长。</p><a id="more"></a><p>如果用Map实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下：</p><p><img src="/2019/11/24/JavaScriptMap%E5%92%8CSet%20/1.png" alt></p><p>初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：</p><p><img src="/2019/11/24/JavaScriptMap%E5%92%8CSet%20/2.png" alt></p><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值覆盖掉：</p><p><img src="/2019/11/24/JavaScriptMap%E5%92%8CSet%20/3.png" alt></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。</p><blockquote><p>var s1 = new Set();  // 空Set</p><p>var s2 = new Set([1,2,3]);  // 含1, 2, 3</p></blockquote><p>重复元素在Set中自动被过滤：</p><p><img src="/2019/11/24/JavaScriptMap%E5%92%8CSet%20/4.png" alt></p><p>注意:  数字3和字符串’3’是不同的元素。</p><p>add(key)  方法可以添加元素到Set中，可以重复添加，但不会有效果：</p><p><img src="/2019/11/24/JavaScriptMap%E5%92%8CSet%20/5.png" alt></p><p>delete(key)  方法可以删除元素：</p><p><img src="/2019/11/24/JavaScriptMap%E5%92%8CSet%20/6.png" alt></p><h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><p>使用<code>iterable</code>内置的<code>forEach</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</span><br><span class="line">a.forEach(function (element, index, array) &#123;</span><br><span class="line">    // element: 指向当前元素的值</span><br><span class="line">    // index: 指向当前索引</span><br><span class="line">    // array: 指向Array对象本身</span><br><span class="line">    alert(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]);</span><br><span class="line">s.forEach(function (element, sameElement, set) &#123;</span><br><span class="line">    alert(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]);</span><br><span class="line">m.forEach(function (value, key, map) &#123;</span><br><span class="line">    alert(value);</span><br><span class="line">&#125;);JS中参数不要求一致，可以需要几个写几个(当然多写就是undefined，而且参数名字可以随便瞎写【滑稽】)</span><br></pre></td></tr></table></figure><p>a.forEach(function (element, index, array,adsf) {<br>// element: 指向当前元素的值<br>// index: 指向当前索引<br>// array: 指向Array对象本身<br>console.log(element, index, array,adsf);<br>});<br>VM2066:5 a 0 [“a”, “b”, “c”] undefined<br>VM2066:5 b 1 [“a”, “b”, “c”] undefined<br>VM2066:5 c 2 [“a”, “b”, “c”] undefined</p><p>for of循环：与java中的foreach类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var x of a) &#123;</span><br><span class="line">    alert(x); // &apos;A&apos;, &apos;B&apos;, &apos;C&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS的默认对象表示方式为{}键值对方式，但是键都是字符串，所以引用了Map</p><p>var m = new Map([[‘micheal’,99],[‘bob’,90],[‘baobao’,100]]);</p><p>m.get(‘micheal’);</p><p>也可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map(); // 空Map </span><br><span class="line">m.set(&apos;Adam&apos;, 67); // 添加新的key-value </span><br><span class="line">m.set(&apos;Bob&apos;, 59); </span><br><span class="line">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true </span><br><span class="line">m.get(&apos;Adam&apos;); // 67 </span><br><span class="line">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos; </span><br><span class="line">m.get(&apos;Adam&apos;); // undefined</span><br></pre></td></tr></table></figure><p>Set 与java中的list相似吧但是值不重复，类型也多变；</p><p>add方法添加元素，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var s = new Set([1, 2, 3, 3, &apos;3&apos;]);s.add(4);s.delete(2);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript-Map和Set&quot;&gt;&lt;a href=&quot;#JavaScript-Map和Set&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Map和Set&quot;&gt;&lt;/a&gt;JavaScript Map和Set&lt;/h2&gt;&lt;p&gt;JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。&lt;/p&gt;
&lt;p&gt;但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，最新的ES6规范引入了新的数据类型Map。&lt;/p&gt;
&lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;p&gt;Map是一组键值对的结构，具有极快的查找速度。&lt;/p&gt;
&lt;p&gt;举个例子，假设要根据同学的名字查找对应的成绩，如果用Array实现，需要两个Array：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var names = [‘Michael’,’Bob’,’Tracy’];&lt;/p&gt;
&lt;p&gt;var scores = [95,75,85];&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，Array越长，耗时越长。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo安装部署</title>
    <link href="http://yoursite.com/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2019/11/16/Hexo安装部署/</id>
    <published>2019-11-16T02:15:57.731Z</published>
    <updated>2019-11-16T02:15:57.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>其实平时自己写日记并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站，现在大家用<code>hexo</code>比较多，也比较方便，并且能使用的主题。</p><ol><li>安装Git Bash</li><li>安装NodeJs</li><li>安装hexo</li><li>生成SSH并添加到github</li><li>部署项目</li><li>上传到github</li><li>绑定个人域名</li><li>修改及配置主题</li><li>添加RSS</li><li>添加评论</li><li>写文章部分</li></ol><h4 id="1-安装Git-Bash"><a href="#1-安装Git-Bash" class="headerlink" title="1. 安装Git Bash"></a>1. <strong>安装Git Bash</strong></h4><p>我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">Git Bash</a>, 我的是windows环境，所以下载windows版本并安装就可以了。<br><a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">下载地址</a></p><p>安装步骤：双击下载好的exe文件，一路next就好啦</p><a id="more"></a><p>安装好后，打开gitbash，查看版本：</p><p>命令：<code>git version</code> (写这篇博客的时候最新版本：2.12.2)</p><p> <img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/gitversion.png" alt></p><p>然后你就可以在这里发挥你的聪明才智了</p><h4 id="2-安装NodeJs"><a href="#2-安装NodeJs" class="headerlink" title="2. 安装NodeJs"></a>2. <strong>安装NodeJs</strong></h4><p>Hexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧</p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a>(说明：LTS为长期支持版，Current为当前最新版)</p><p>安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 <code>Add to PATH</code> ,这样你就不用自己去配置电脑上环境变量了，装完在按 <code>win + r</code> 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。</p><p>查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：node -v</span><br></pre></td></tr></table></figure><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/node-v.png" alt="node-version"><br>又到自由发挥的时候了</p><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. <strong>安装hexo</strong></h4><p>看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。</p><p>先创建一个文件夹（用来存放所有blog的东西），然后<code>cd</code>到该文件夹下。</p><p>安装hexo命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo</span><br></pre></td></tr></table></figure><p>安装完成后，查看版本：<code>npm -v</code></p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/hexo-v.png" alt="npm-v"></p><p>初始化命令：<code>hexo init</code> ，初始化完成之后打开所在的文件夹可以看到以下文件：</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/hexo-init.png" alt="myblog"></p><p>解释一下：</p><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><p>做好这些前置工作之后接下来的就是各种配配配置了。</p><h4 id="4-生成SSH并添加到github"><a href="#4-生成SSH并添加到github" class="headerlink" title="4. 生成SSH并添加到github"></a>4. <strong>生成SSH并添加到github</strong></h4><p>没账号的创建账号，有账号的看下面。</p><p>创建一个repo，名称为<code>yourname.github.io</code>, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：<br><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/new-repo.png" alt="new-repo"></p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/create-repo.png" alt="create-repo"><br>回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）：</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/username.png" alt="username"><br><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/email.png" alt="email"></p><p>创建SSH</p><p>在gitbash中输入：<code>ssh-keygen -t rsa -C &quot;youremail@example.com</code>，生成ssh。然后按下图的方式找到<code>id_rsa.pub</code>文件的内容。</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/ssh.png" alt="ssh-key"><br>将上面获取的ssh放到github中：</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/settings.png" alt="settings"><br><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/ssh-key.png" alt="ssh-key"><br>添加一个 <code>New SSH key</code> ，title随便取，key就填刚刚那一段。</p><p>在gitbash中验证是否添加成功：<code>ssh -T git@github.com</code></p><p>完成下一步你就成功啦！</p><h4 id="5-部署项目"><a href="#5-部署项目" class="headerlink" title="5. 部署项目"></a>5. <strong>部署项目</strong></h4><p>用编辑器打开你的blog项目，修改<code>_config.yml</code>文件的一些配置(冒号之后都是有一个半角空格的)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">type: git  </span><br><span class="line">repo: https://github.com/YourgithubName/YourgithubName.github.io.git  </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>回到gitbash中，进入你的blog目录，分别执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>注：hexo 3.0把服务器独立成个别模块，需要单独安装：<code>npm i hexo-server</code>。</p><p>打开浏览器输入：<code>http://localhost:4000</code></p><p>接着你就可以遇见天使的微笑了~</p><h4 id="6-上传到github"><a href="#6-上传到github" class="headerlink" title="6. 上传到github"></a>6. <strong>上传到github</strong></h4><p>先安装一波：<code>npm install hexo-deployer-git --save</code>（这样才能将你写好的文章部署到github服务器上并让别人浏览到）</p><p>执行命令(建议每次都按照如下步骤部署)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>注意deploy的过程中要输入你的username及passward。如下：</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/deploy.png" alt="deploy"></p><p>在浏览器中输入<code>http://yourgithubname.github.io</code>就可以看到你的个人博客啦，是不是很兴奋！</p><p>感觉gitbash中东西太多的时候输入<code>clear</code>命令清空。</p><h4 id="7-绑定个人域名"><a href="#7-绑定个人域名" class="headerlink" title="7. 绑定个人域名"></a>7. <strong>绑定个人域名</strong></h4><p>不想绑定的自行忽略</p><p>第一步购买域名：随便在哪个网站买一个就好了，小花是在阿里云购买的<a href="http://visugar.com/" target="_blank" rel="noopener">visugar.com</a>, DNS也是顺道在那买的。</p><p>第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是<code>visugar.com</code>，只能添加一个哦。</p><p>到DNS中添加一条记录：</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/dns-note.png" alt="dns-note"><br>其中ip地址为你的github的地址，可在cmd中ping一下就能看到(<code>ping yourname.github.io</code>)：</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/github-ip.png" alt="github-ip"><br>接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~</p><h4 id="8-修改及配置主题"><a href="#8-修改及配置主题" class="headerlink" title="8. 修改及配置主题"></a>8. <strong>修改及配置主题</strong></h4><p>hexo初始化之后默认的主题是<code>landscape</code> , 然后你可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这个地址</a>里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是<code>hueman</code>,看起来挺不错，至少是我喜欢的类型。</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/themes.png" alt="themes"><br>跟该主题相关的配置在<code>themes/hueman/_config.yml</code>里面,然后根据你的需要在这配配配就行了。</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/themes-config.png" alt="themes-config"><br>有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦!下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似:</p><p><strong>在导航栏添加点东西</strong></p><p>例如我添加了一个更新日志的模块。</p><p>在主题的配置文件中，menu添加一栏：<code>Board: /board</code>。</p><p>然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。</p><p>在主题的<code>hueman/langulages/zh-CN.yml</code>中的index适当的位置加：<code>board: &#39;更新日志&#39;</code>，位置和名字是你自己设定。</p><p>重新部署，然后就OK了</p><p><strong>在侧边栏添加点东西</strong></p><p>回到你的主题的配置文件中，找到<code>widgets</code>一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫<code>communiation</code>且放在了第二行。</p><p>在上面所提到的<code>zh-CN.yml</code>文件中找到sidebar一栏，添加<code>communiation: &#39;你要设的名称&#39;</code>。</p><p>在<code>hueman/layout/widget</code>中添加一个<code>communiation.ejs</code>,填入模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (site.posts.length) &#123; %&gt;    &lt;div class=&quot;widget-wrap widget-list&quot;&gt;        &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&apos;sidebar.communiation&apos;) %&gt;&lt;/h3&gt;        &lt;div class=&quot;widget&quot;&gt;            &lt;!--这里添加你要写的内容--&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="9-添加RSS"><a href="#9-添加RSS" class="headerlink" title="9. 添加RSS"></a>9. <strong>添加RSS</strong></h4><p>先安装rss相关插件：<code>npm i hexo-generator-feed</code></p><p>在你的项目的<code>_config.yml</code>配置文件下找到Extensions添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Extensions  #插件和主题## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:  type: atom  path: atom.xml  limit: 20</span><br></pre></td></tr></table></figure><p>进入到你的主题的配置文件下，找到你的放rss的位置，添加<code>/atom.xml</code>即可。</p><p>重新部署再打开就能看到效果啦~</p><h4 id="10-添加评论"><a href="#10-添加评论" class="headerlink" title="10. 添加评论"></a>10. <strong>添加评论</strong></h4><p><strong>20170812更新：</strong><br>云更贴已在2017年8月1日停止服务，具体评论系统文章统计站长统计及百度SEO谷歌SEO什么的可参考<a href="http://visugar.com/2017/08/01/20170801HexoPlugins/" target="_blank" rel="noopener">Hexo博客添加SEO-评论系统-阅读统计-站长统计</a></p><p>此段已失效。</p><p>先选一个你要使用的第三方评论系统，最好找个靠谱点的（我使用的是网易云跟帖）。</p><p>在主题的配置文件下找到comment，添加一行，例如我添加的是<code>yungentie: 此处自由发挥</code></p><p>注册完评论系统后获取相应的代码，然后在主题的layout下找到comment新建一个ejs模板文件，名称自定义。</p><p><img src="/2019/11/16/Hexo%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/yungentie.png" alt="yungentie"><br>找到你的article.ejs模板文件，加上<code>&lt;%- partial(&#39;comment/你刚刚取得名字&#39;) %&gt;</code>保存。</p><p>重新部署，OK啦</p><h4 id="11-写文章部分"><a href="#11-写文章部分" class="headerlink" title="11. 写文章部分"></a>11. <strong>写文章部分</strong></h4><ul><li>新建文章：<code>hexo new &#39;文章名&#39;</code>，然后你就可以在<code>source/_posts</code>路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。</li><li>关于具体的文章编辑你可以看下<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">官网的介绍</a></li><li>至于markdown，可以自行发挥啦~</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;其实平时自己写日记并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站，现在大家用&lt;code&gt;hexo&lt;/code&gt;比较多，也比较方便，并且能使用的主题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装Git Bash&lt;/li&gt;
&lt;li&gt;安装NodeJs&lt;/li&gt;
&lt;li&gt;安装hexo&lt;/li&gt;
&lt;li&gt;生成SSH并添加到github&lt;/li&gt;
&lt;li&gt;部署项目&lt;/li&gt;
&lt;li&gt;上传到github&lt;/li&gt;
&lt;li&gt;绑定个人域名&lt;/li&gt;
&lt;li&gt;修改及配置主题&lt;/li&gt;
&lt;li&gt;添加RSS&lt;/li&gt;
&lt;li&gt;添加评论&lt;/li&gt;
&lt;li&gt;写文章部分&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;1-安装Git-Bash&quot;&gt;&lt;a href=&quot;#1-安装Git-Bash&quot; class=&quot;headerlink&quot; title=&quot;1. 安装Git Bash&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;安装Git Bash&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Bash&lt;/a&gt;, 我的是windows环境，所以下载windows版本并安装就可以了。&lt;br&gt;&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装步骤：双击下载好的exe文件，一路next就好啦&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
